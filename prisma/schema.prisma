// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  createInputTypes = false
  addIncludeType   = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        Int       @id @default(autoincrement())
  name      String /// @zod.string.min(3, { message: "Email is required" })
  address   String /// @zod.string.min(3, { message: "Address is required" })
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([name])
}

model Product {
  id         Int               @id @default(autoincrement())
  name       String            @db.VarChar(255) /// @zod.string.min(3, { message: "Name is required" })
  price      Decimal           @default(0) @db.Decimal(10, 2)
  storeId    Int
  store      Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  categories ProductCategory[]

  @@unique([name, storeId])
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(255) /// @zod.string.min(3, { message: "Name is required" })
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]

  @@unique([name])
}

model ProductCategory {
  productId  Int
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
